#include <iostream>
#include <algorithm>
#include <string>
#include <cstdlib>
#include <ctime>


#define GRIDSIZE 8
#define OBSTACLE 2
#define judge_black 0
#define judge_white 1
#define grid_black 1
#define grid_white -1
#define MAX_VAL 65000
#define MIN_VAL -65000

using namespace std;

int currBotColor; // 我所执子颜色（1为黑，-1为白，棋盘状态亦同）
int gridInfo[GRIDSIZE][GRIDSIZE] = { 0 }; // 先x后y，记录棋盘状态
int temp[GRIDSIZE][GRIDSIZE] = { 0 };
int black[4][2] = { 0 };
int white[4][2] = { 0 };
int dx[8] = { 1,0,1,1,0,-1,-1,-1 };
int dy[8] = { 1,1,-1,0,-1,1,0,-1 };


// 判断是否在地图内
inline bool inMap(int x, int y)
{
	if (x < 0 || x > GRIDSIZE || y < 0 || y > GRIDSIZE)
		return false;
	return true;
}
bool isWay(int x0, int y0, int x1, int y1, int x2, int y2, int color)
{
	if (color == OBSTACLE && x1 == x2 && y1 == y2)return true;
	if (x0 == x1 && y0 == y1)return false; //如果重叠
	if (gridInfo[x1][y1] != 0)return false; //如果已经被占领
	if (x1 != x0 && y1 == y0)
	{
		if (x1 < x0)
		{
			for (int a = x0 - 1; a >= x1; a--)//上面--同一列不同行找可以走到哪里
			{
				if (gridInfo[a][y0] != 0)
				{
					cout << "a" << endl;
					return false;
				}
			}
		}
		if (x1 > x0)
		{
			for (int a = x0 + 1; a <= x1; a++)//下面--同一列不同行找可以走到哪里
			{
				if (gridInfo[a][y0] != 0)
				{
					cout << "b" << endl;
					return false;
				}
			}
		}
	}

	if (x1 == x0 && y1 != y0)
	{
		if (y1 < y0)
		{
			for (int a = y0 - 1; a >= y1; a--)//左边--同一行不同列找可以走到哪里
			{
				if (gridInfo[x0][a] != 0)
				{
					cout << "c" << endl;
					return false;
				}
			}
		}
		if (y1 > y0)
		{
			for (int a = y0 + 1; a <= y1; a++)//右边--同一行不同列找可以走到哪里
			{
				if (gridInfo[x0][a] != 0)
				{
					cout << "d" << endl;
					return false;
				}
			}
		}
	}

	if (x1 > x0&& y1 > y0)
	{
		bool done = false;
		int right_bottom_temp = x0 + y0;//判断右下对角线 (加2）
		for (int a = x0 + 1; a <= x1; a++)
		{
			for (int b = y0 + 1; b <= y1; b++)
			{
				if (a + b == 2 + right_bottom_temp)
				{
					right_bottom_temp += 2;
					if (gridInfo[a][b] != 0)
					{
						cout << "e" << endl;
						done = true;
						return false;
					}
				}
				if (a == x1 && b == y1)
				{
					done = true;

					return true;
				}
			}
		}
		if (done == false)
		{
			cout << "f" << endl;
			return false;
		}
	}

	if (x1 < x0 && y1 > y0)
	{
		bool done = false;
		int right_top_temp = x0 + y0; //判断右上角（同数）
		{
			for (int a = x0 - 1; a >= x1; a--)
			{
				for (int b = y0 + 1; b <= y1; b++)
				{
					if (a + b == right_top_temp)
					{
						if (gridInfo[a][b] != 0)
						{
							cout << "g" << endl;
							done = true;
							return false;
						}
					}
					if (a == x1 && b == y1)
					{
						done = true;
						return true;
					}
				}
			}
			if (done == false)
			{
				cout << "h" << endl;
				return false;
			}
		}
	}

	if (x1 < x0 && y1 < y0)
	{
		bool done = false;
		int left_top_temp = x0 + y0;//判断左上对角线 (加2）
		for (int a = x0 - 1; a >= x1; a--)
		{
			for (int b = y0 - 1; b >= y1; b--)
			{
				if (a + b == 2 + left_top_temp)
				{
					left_top_temp += 2;

					if (gridInfo[a][b] != 0)
					{
						done = true;
						cout << "i" << endl;
						return false;
					}
				}
				if (a == x1 && b == y1)
				{
					done = true;
					return true;
				}
			}
		}
		if (done == false)
		{
			cout << "j" << endl;
			return false;
		}
	}

	if (x1 > x0&& y1 < y0)
	{
		bool done = false;
		int left_bottom_temp = x0 + y0;//判断左下对角线（同数）
		for (int a = x0 + 1; a <= x1; a++)
		{
			for (int b = y0 - 1; b >= y0; b--)
			{
				if (a + b == left_bottom_temp)
				{
					if (gridInfo[a][b] != 0)
					{
						done = true;
						cout << "k" << endl;
						return false;
					}

					if (a == x1 && b == y1)
					{
						done = true;
						return true;
					}
				}
			}
		}

		if (done == false)
		{
			cout << "l" << endl;
			return false;
		}
	}
	return true;
}

bool isValid(int x0, int y0, int x1, int y1, int x2, int y2, int color)
{
	if ((!inMap(x0, y0)) || (!inMap(x1, y1)) || (!inMap(x2, y2))) //任何一点不在棋盘内的话，就返回false
		return false;
	if (gridInfo[x0][y0] != color || gridInfo[x1][y1] != 0) //自己的棋子不在选择的起点上或者要去的地方已经被占领了，就返回false
		return false;
	if ((gridInfo[x2][y2] != 0) && !(x2 == x0 && y2 == y0)) //选择的障碍位置已经被占领，除非障碍位置是自己的起始位置
		return false;
	if (!(isWay(x0, y0, x1, y1, x2, y2, color) && isWay(x1, y1, x2, y2, x0, y0, OBSTACLE))) //如果是非法步法,返回false
		return false;
	return true;
}
// 在坐标处落子，检查是否合法或模拟落子
bool ProcStep(int x0, int y0, int x1, int y1, int x2, int y2, int color, bool check_only)
{
	if (!check_only) //移动棋子
	{
		gridInfo[x0][y0] = 0;
		gridInfo[x1][y1] = color;
		gridInfo[x2][y2] = OBSTACLE;
	}
	return true;
}
// 绘制棋盘 
void PrintTable()
{
	int x1 = 0;
	int x2 = 0;
	int y1 = 0;
	int y2 = 0;
	cout << endl << "   ";
	for (int i = 0; i < GRIDSIZE; i++)
	{
		cout << "   " << i << "  ";
	}
	cout << endl;
	for (int i = 0; i < GRIDSIZE; i++)
	{
		cout << "  |";
		for (int j = 0; j < GRIDSIZE; j++)
		{
			cout << "|-----";
		}
		cout << "||" << endl << " " << i << "|";
		for (int j = 0; j < GRIDSIZE; j++)
		{
			if (gridInfo[i][j] == grid_black)
			{
				black[x1][y1++] = i;
				black[x1++][y1] = j;
				y1 = 0;
				cout << "|  B  ";

			}
			else if (gridInfo[i][j] == grid_white)
			{
				white[x2][y2++] = i;
				white[x2++][y2] = j;
				y2 = 0;
				cout << "|  W  ";
			}
			else if (gridInfo[i][j] == OBSTACLE)
			{
				cout << "|  #  ";
			}
			else
			{
				cout << "|     ";
			}
		}
		cout << "||" << endl;
	}
	cout << "  |";
	for (int i = 0; i < GRIDSIZE; i++)
	{
		cout << "|-----";
	}
	cout << "||\n" << endl;
}
void printcoordinate()//debug
{
	cout << "black" << endl;
	for (int a = 0; a < 4; a++)
	{
		for (int b = 0; b < 2; b++)
		{
			cout << black[a][b] << ' ';
		}
		cout << endl;
	}

	cout << "white" << endl;
	for (int a = 0; a < 4; a++)
	{
		for (int b = 0; b < 2; b++)
		{
			cout << white[a][b] << ' ';
		}
		cout << endl;
	}
}
bool check_win(int test[][2])
{
	int count = 0;

	for (int a = 0; a < 4; a++)
	{
		int x1 = test[a][0];
		int y1 = test[a][1];
		bool win = false;

		if (x1 > 0)
		{
			if (gridInfo[x1 - 1][y1] == 0)
			{
				win = true;
			}
		}
		if (x1 < 7)
		{
			if (gridInfo[x1 + 1][y1] == 0)
			{
				win = true;
			}
		}
		if (y1 > 0)
		{
			if (gridInfo[x1][y1 - 1] == 0)
			{
				win = true;
			}
		}
		if (y1 < 7)
		{
			if (gridInfo[x1][y1 + 1] == 0)
			{
				win = true;
			}
		}
		if (x1 != 0 && y1 != 0)
		{
			if (gridInfo[(x1) - 1][y1 - 1] == 0)
			{
				win = true;
			}
		}
		if (x1 != 0 && y1 != 7)
		{
			if (gridInfo[(x1) - 1][y1 + 1] == 0)
			{
				win = true;
			}
		}
		if (x1 != 7 && y1 != 0)
		{
			if (gridInfo[(x1) + 1][y1 - 1] == 0)
			{
				win = true;
			}
		}
		if (x1 != 7 && y1 != 7)
		{
			if (gridInfo[(x1) + 1][y1 + 1] == 0)
			{
				win = true;
			}
		}

		if (win == false)
		{
			count++;
		}
	}
	if (count == 4)
	{
		return true;
	}

	else if (count != 4)
	{
		return false;
	}
}
int my_lastx, my_lasty, my_newx, my_newy, my_obx, my_oby;
int myking[8][8], plking[8][8], myqueen[8][8], plqueen[8][8], mm;
int bj[8][8];
int queuex[65], queuey[65], qdeep[65];
int top = 0;
int end1 = 0;
int enddeep = 0;
int count_n = 0;

double value()
{
	for (int i = 0; i < 8; i++)
		for (int j = 0; j < 8; j++)
		{
			myking[i][j] = plking[i][j] = myqueen[i][j] = plqueen[i][j] = MAX_VAL;
		}
	double t1 = 0, t2 = 0, p1 = 0, p2 = 0, m = 0;
	for (int z = 0; z < 4; z++)
	{
		memset(bj, 0, sizeof(bj));
		top = 0;
		end1 = 1;
		queuex[0] = white[z][0];
		queuey[0] = white[z][1];
		qdeep[0] = 0;
		bj[white[z][0]][white[z][1]] = 1;
		while (top != end1)
		{
			int x = queuex[top];
			int y = queuey[top];
			int deep = qdeep[top];
			myking[x][y] = min(myking[x][y], deep);
			for (int i = 0; i < 8; i++)
			{
				if ((inMap(x + dx[i], y + dy[i]))== false) continue;
				if (bj[x + dx[i]][y + dy[i]]) continue;
				if (gridInfo[x + dx[i]][y + dy[i]]) continue;
				queuex[end1] = x + dx[i];
				queuey[end1] = y + dy[i];
				qdeep[end1] = deep + 1;
				bj[x + dx[i]][y + dy[i]] = 1;
				end1++;
			}
			top++;
		}
		myking[white[z][0]][white[z][1]] = MAX_VAL;
	}
	for (int z = 0; z < 4; z++)
	{
		memset(bj, 0, sizeof(bj));
		top = 0;
		end1 = 1;
		queuex[0] = black[z][0];
		queuey[0] = black[z][1];
		qdeep[0] = 0;
		bj[black[z][0]][black[z][1]] = 1;
		while (top != end1)
		{
			int x = queuex[top];
			int y = queuey[top];
			int deep = qdeep[top];
			plking[x][y] = min(plking[x][y], deep);
			for (int i = 0; i < 8; i++)
			{
				if ((inMap(x + dx[i], y + dy[i])) == false) continue;
				if (bj[x + dx[i]][y + dy[i]]) continue;
				if (gridInfo[x + dx[i]][y + dy[i]]) continue;
				queuex[end1] = x + dx[i];
				queuey[end1] = y + dy[i];
				qdeep[end1] = deep + 1;
				bj[x + dx[i]][y + dy[i]] = 1;
				end1++;
			}
			top++;
		}
		plking[dx[z]][dy[z]] = MAX_VAL;
	}
	for (int z = 0; z < 4; z++)
	{
		memset(bj, 0, sizeof(bj));
		top = 0;
		end1 = 1;
		queuex[0] = white[z][0];
		queuey[0] = white[z][1];
		qdeep[0] = 0;
		bj[black[z][0]][black[z][1]] = 1;
		while (top != end1)
		{
			int x = queuex[top];
			int y = queuey[top];
			int deep = qdeep[top];
			myqueen[x][y] = min(myqueen[x][y], deep);
			for (int i = 0; i < 8; i++)
			{
				for (int p = 1;; p++)
				{
					if ((inMap(x + p * dx[i], y + p * dy[i])) == false) break;
					if (bj[x + p * dx[i]][y + p * dy[i]]) continue;
					if (gridInfo[x + p * dx[i]][y + p * dy[i]]) break;
					queuex[end1] = x + p * dx[i];
					queuey[end1] = y + p * dy[i];
					qdeep[end1] = deep + 1;
					bj[x + p * dx[i]][y + p * dy[i]] = 1;
					end1++;
				}
			}
			top++;
		}
		myqueen[white[z][0]][white[z][1]] = MAX_VAL;
	}
	for (int z = 0; z < 4; z++)
	{
		memset(bj, 0, sizeof(bj));
		top = 0;
		end1 = 1;
		queuex[0] = white[z][0];
		queuey[0] = white[z][1];
		qdeep[0] = 0;
		bj[black[z][0]][black[z][1]] = 1;
		while (top != end1)
		{
			int x = queuex[top];
			int y = queuey[top];
			int deep = qdeep[top];
			plqueen[x][y] = min(plqueen[x][y], deep);
			for (int i = 0; i < 8; i++)
			{
				for (int p = 1;; p++)
				{
					if ((inMap(x + p * dx[i], y + p * dy[i]))== false) break;
					if (bj[x + p * dx[i]][y + p * dy[i]]) continue;
					if (gridInfo[x + p * dx[i]][y + p * dy[i]]) break;
					queuex[end1] = x + p * dx[i];
					queuey[end1] = y + p * dy[i];
					qdeep[end1] = deep + 1;
					bj[x + p * dx[i]][y + p * dy[i]] = 1;
					end1++;
				}

			}
			top++;
		}
		plqueen[black[z][0]][black[z][1]] = MAX_VAL;
	}
	for (int i = 0; i < 8; i++)
		for (int j = 0; j < 8; j++)
		{
			if (myqueen[j][i] > 1)	continue;
			mm = 0;
			for (int p = 0; p < 8; p++)
			{
				if ((inMap(i + dx[p], j + dy[p])) == false) continue;
				if (gridInfo[i + dx[p]][j + dy[p]]) continue;
				mm++;
			}
			m += mm / myking[i][j];
		}
	for (int i = 0; i < 8; i++)
		for (int j = 0; j < 8; j++)
		{
			if (myking[i][j] > plking[i][j]) t1 += -1;
			else if (myking[i][j] < plking[i][j]) t1 += 1;
			else if (myking[i][j] == MAX_VAL) t1 += 0;
			else t1 += 0.17;

			if (myqueen[i][j] > plqueen[i][j]) t2 += -1;
			else if (myqueen[i][j] < plqueen[i][j]) t2 += 1;
			else if (myqueen[i][j] == MAX_VAL) t2 += 0;
			else t2 += 0.17;

			p1 += 2.0 * (pow(2.0, -1 * myqueen[i][j]) - pow(2.0, -1 * plqueen[i][j]));

			p2 += min(1.0, max(-1.0, (plking[i][j] - myking[i][j]) / 6.0));
		}
	double vv;
	if (count_n <= 7) vv = 0.24 * t1 + 0.47 * t2 + 0.13 * p1 + 0.13 * p2 + 0.20 * m;
	else if (count_n <= 16) vv = 0.30 * t1 + 0.25 * t2 + 0.30 * p1 + 0.30 * p2 + 0.05 * m;
	else vv = 0.8 * t1 + 0.1 * t2 + 0.1 * p1 + 0.1 * p2;
	return vv;
}
double dfs(int deep, double lastmaxmin)
{
	if (deep == enddeep) return value();
	double maxmin;
	//我方行棋
	if (deep % 2 == 0)
	{
		maxmin = MIN_VAL;
		int x1, yy1, x2, y2, x3, y3;
		for (int z = 0; z <= 3; z++)
		{
			x1 = white[z][0];
			yy1 = white[z][1];
			for (int p = 0; p < 8; p++)
			{
				for (int i = 1;; i++)
				{
					if (inMap(x1 + i * dx[p], yy1 + i *dy[p])) break;
					if (gridInfo[x1 + i * dx[p]][yy1 + i * dy[p]]) break;
					x2 = x1 + i * dx[p];
					y2 = yy1 + i * dy[p];
					white[z][0] = x2;
					white[z][1] = y2;
					gridInfo[x1][yy1] = 0;
					gridInfo[x2][y2] = -1;
					//布置障碍
					for (int p = 0; p < 8; p++)
					{
						for (int i = 1;; i++)
						{
							if ((inMap(x2 + i * dx[p], y2 + i * dy[p])) == false) break;
							if (gridInfo[x2 + i * dx[p]][y2 + i * dy[p]]) break;
							x3 = x2 + i * dx[p];
							y3 = y2 + i * dy[p];
							gridInfo[x3][y3] = 2;
							double newval = dfs(deep + 1, maxmin);
							gridInfo[x3][y3] = 0;
							if (deep != 0) maxmin = max(newval, maxmin);
							else if (newval > maxmin)
							{
								maxmin = newval;
								my_lastx = x1;
								my_lasty = x2;
								my_newx = x3;
								my_newy = yy1;
								my_obx = y2;
								my_oby = y3;
							}
							if (maxmin >= lastmaxmin)
							{
								gridInfo[x1][yy1] = 1;
								gridInfo[x2][y2] = 0;
								white[z][0] = x1;
								white[z][1] = yy1;
								return maxmin;
							}
						}
					}
					//布置障碍结束
					gridInfo[x1][yy1] = -1;
					gridInfo[x2][y2] = 0;
					white[z][0] = x1;
					white[z][1] = yy1;
				}
			}
		}
		if (maxmin == MIN_VAL) return value();
	}
	//他方
	else
	{
		maxmin = MAX_VAL;
		int x1, yy1, x2, y2, x3, y3;
		for (int z = 0; z <= 3; z++)
		{
			x1 = dx[z];
			yy1 = dy[z];
			for (int p = 0; p < 8; p++)
			{
				for (int i = 1;; i++)
				{
					if ((inMap(x1 + i * dx[p], yy1 + i * dy[p]))==false) break;
					if (gridInfo[x1 + i * dx[p]][yy1 + i * dy[p]]) break;
					x2 = x1 + i * dx[p];
					y2 = yy1 + i * dy[p];
					white[z][0] = x2;
					white[z][1] = y2;
					gridInfo[x1][yy1] = 0;
					gridInfo[x2][y2] = 2;
					//布置障碍
					for (int p = 0; p < 8; p++)
					{
						for (int i = 1;; i++)
						{
							if ((inMap(x2 + i * dx[p], y2 + i * dy[p]))== false) break;
							if (gridInfo[x2 + i * dx[p]][y2 + i * dy[p]]) break;
							x3 = x2 + i * dx[p];
							y3 = y2 + i * dy[p];
							gridInfo[x3][y3] = 2;
							double newval = dfs(deep + 1, maxmin);
							gridInfo[x3][y3] = 0;
							maxmin = min(newval, maxmin);
							if (maxmin <= lastmaxmin)
							{
								gridInfo[x1][yy1] = 2;
								gridInfo[x2][y2] = 0;
								white[z][0] = x1;
								white[z][1] = yy1;
								return maxmin;
							}
						}
					}

					gridInfo[x1][yy1] = -1;
					gridInfo[x2][y2] = 0;
					white[z][0] = x1;
					white[z][1] = yy1;
				}
			}
		}
		if (maxmin == MAX_VAL) return value();
	}
	return maxmin;
}
int main()
{
	int x0, y0, x1, y1, x2, y2;

	// 初始化棋盘
	gridInfo[0][(GRIDSIZE - 1) / 3] = gridInfo[(GRIDSIZE - 1) / 3][0]
		= gridInfo[GRIDSIZE - 1 - ((GRIDSIZE - 1) / 3)][0]
		= gridInfo[GRIDSIZE - 1][(GRIDSIZE - 1) / 3] = grid_black;
	gridInfo[0][GRIDSIZE - 1 - ((GRIDSIZE - 1) / 3)] = gridInfo[(GRIDSIZE - 1) / 3][GRIDSIZE - 1]
		= gridInfo[GRIDSIZE - 1 - ((GRIDSIZE - 1) / 3)][GRIDSIZE - 1]
		= gridInfo[GRIDSIZE - 1][GRIDSIZE - 1 - ((GRIDSIZE - 1) / 3)] = grid_white;


	int turnID;
	cout << "请输入局数:";
	cin >> turnID;
	system("cls");
	PrintTable();

	currBotColor = grid_white; // 先假设自己是黑方
	for (int i = 1; i <= 99; i++)
	{
		if (i % 2 == 0)currBotColor = grid_white; // 每局换人
		else currBotColor = grid_black;
		cout << (currBotColor == grid_white ? "当前为白方走步，请输入：" : "当前为黑方走步,请输入: ");
		cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2;
		if (isValid(x0, y0, x1, y1, x2, y2, currBotColor))
		{
			ProcStep(x0, y0, x1, y1, x2, y2, currBotColor, false);
			if (check_win(white))
			{
				cout << "游戏结束，黑方获胜！" << endl;
				break;
			}
			if (check_win(black))
			{
				cout << "游戏结束，白方获胜！" << endl;
				break;
			}
		}

		else
		{
			cout << "非法走步，请重试!\n" << endl;
			i--;
		}
		system("cls");
		PrintTable();
		//printcoordinate();
	}
	return 0;
}
